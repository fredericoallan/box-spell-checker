//para testes do java
String message;
message="texto" + " texto";

//anotações


/*
*	passos para implementação
*	1) ler o arquivo json de configuração em uma variavel
*	2) ler o arquivo dicionario em uma variavel
*	3) iterar entre a qtd de extensoes  "Extension": "html"
*	4) capturar o path e files e passar para a classe ReadDirFiles
*		4.1) a classe readdirfiles varre o path. Ao enconntrar um arquivo eu verifico se a lista
*			files possui valores. 
*			se possuir eu verifico se o arquivo encontrado esta na lista files
*				se tiver 
*					eu adiciono em uma lista de arquivos
*				se nao tiver
*					eu nao adiciono em uma lista de arquivos
*			senao,  
*				eu adiciono em uma lista de arquivos direto
*			ao final de tudo, retorno a lista de arquivos deste path em espefífico
*	5) com a lista em mãos, eu varro a lista e abro arquivo por arquivo
*		5.1) para cada linha do arquivo (crlf) eu devo percorrer os regexs do arquivo de config
*			5.1.1) aplicar o regex corrente na linha e verificar se deu match
*					se sim, guardar o math em uma matriz
*						["arquivo", linha 1, "frase de retorno do match", "regex usado"]
*						["arquivo", linha 1, "frase de retorno do match", "regex usado"]
*					se nao, não guardar a linha nesta matriz
*			5.1.2) ao final dos regexs, retornar a matriz para ser usada na validação do dicionario
*		5.2) ao final, retornar a lista de frases por arquivo
*	6) com a lista de frases em maos, por arquivo, eu devo percorrer a lista de frases
**		6.1) para cada frase, eu devo realizar um split por espaço e capturar as palavras
*			 em uma lista
*			6.1.1) eu devo percorrer palavra por palavra e:
*				6.1.1.1) varrer a lista de dicionario
*						se eu achar essa palavra / der math na palavra correte do dicionario
							eu seto que achei (esta correta)
							pulo para a proxima palavra do split
						se eu nao achar
							eu valido se setei o achei
							se eu não setei (nao achei no dicionario0
								entao eu insiro essa palavra em uma lista de erros
	7) imprimir o arquivo com os erros						
*
*
*{
  "extensions":
    [
      {
        "ext":  "properties",
        "path": "/home/fredericoallan/Projetos/cashlink_war/cashlink_service/src/main/resources/i18n",
        "files": [],
        "regex":  {
                    "exp": [
                            "=(.*)"
                           ],
                    "group": 1
                  }
      },
      {
        "ext":  "html",
        "path": "/home/fredericoallan/Projetos/cashlink_war/cashlink_view",
        "files": [],
        "regex":  {
                    "exp": [
                            "<th>(.*?)<\/th>"
                           ],
                    "group": 1
                  }
      },
      {
        "ext":  "js",
        "path": "/home/fredericoallan/Projetos/cashlink_war/cashlink_view",
        "files": [],
        "regex":  {
                    "exp": [
                            "pop[^)]+[)]\\s*;"
                           ],
                    "group": 1
                  }
      },
      {
        "ext":  "js",
        "path": "/home/fredericoallan/temp/box-spell-checker",
        "files": [],
        "regex":  {
                    "exp": [
                            "utils.info\\(\"(.*)\"\\)\\;",
                            "utils.error\\(\"(.*)\"\\)\\;",
                            "utils.warn\\(\"(.*)\"\\)\\;",
                            "utils.confirm\\(\"(.*)\"\\)\\;"
                           ],
                    "group": 1
                  }
      }
    ],
  "dictionaryFile": "/home/fredericoallan/Projetos/java/box-spell-checker/pt_BR.json"
}
*
*
*
*
*/


